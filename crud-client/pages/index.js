import Head from 'next/head'
import { Inter } from 'next/font/google'
// import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import axios from 'axios'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [notes, setNotes] = useState(null);
  const [createForm, setCreateForm] = useState({
    name: '',
    body: '',
  });
  const [updateForm, setUpdateForm] = useState({
    _id: null,
    name: '',
    body: '',
  });

  useEffect(() => {
    fetchNotes();
  }, []);

  const fetchNotes = async () => {
    const res = await axios.get('http://localhost:3002/notes');
    setNotes(res.data.note);
  };

  const updateCreateform = (e) => {
    const { name, value } = e.target;
    setCreateForm({
      ...createForm,
      [name]: value,
    })
  };
  const createNote = async (e) => {
    e.preventDefault();
    const res = await axios.post('http://localhost:3002/notes', createForm);
    setNotes([...notes, res.data.note]);
    setCreateForm({ name: '', body: '' });
  };
  const deleteNote = async (_id) => {
    const res = await axios.delete(`http://localhost:3002/notes/${_id}`);
    const newNotes = [...notes].filter((note) => {
      return note._id !== _id;
    });
    setNotes(newNotes);
  };
  const updateFieldChange = (e) => {
    const { name, value } = e.target;
    setUpdateForm({
      ...updateForm,
      [name]: value,
    })
  };
  const toggleUpdate = (note) => {
    setUpdateForm({ name: note.name, body: note.body, _id: note._id });

  };
  const updateNote = async (e) => {
    e.preventDefault();
    const { name, body, } = updateForm;
    const res = await axios.put(`http://localhost:3002/notes/${updateForm._id}`, { name, body });
    const newNotes = [...notes];
    const noteIndex = notes.findIndex((note) => {
      return note._id === updateForm._id;
    });
    newNotes[noteIndex] = res.data.note;
    setNotes(newNotes);
    setUpdateForm({ _id: null, name: '', body: '' });
  };
  return (
    <>
      <Head>
        <title>My CRUD-App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/CRUD.png" />
      </Head>
      <div>
        <div>
          <h2>Notes:</h2>
          {notes && notes.map(note => {
            return <div key={note._id}>
              <h3>{note.name}</h3>
              <h5>{note.body}</h5>
              <button onClick={() => { deleteNote(note._id) }}>Delete</button>
              <button onClick={() => { toggleUpdate(note) }}>Edit</button>
            </div>
          })}
        </div>
        {updateForm._id && (<div>
          <h3>Edit:</h3>
          <form onSubmit={updateNote}>
            <input name='name' onChange={updateFieldChange} value={updateForm.name} />
            <textarea name='body' onChange={updateFieldChange} value={updateForm.body} />
            <button type='submit'>Update</button>
          </form>
        </div>)}
        {!updateForm._id && (<div>
          <h3>Create a Note:</h3>
          <form onSubmit={createNote}>
            <input name='name' value={createForm.name} onChange={updateCreateform} />
            <textarea name='body' value={createForm.body} onChange={updateCreateform} />
            <button type='submit'>Submit</button>
          </form>
        </div>)}
      </div>
    </>
  )
}
